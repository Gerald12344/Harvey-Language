// Source Code: for .Harvey Compiler!

import { parser } from './compiler/Parse';
import { tokenizer } from './compiler/Tokeniser';
import { CreateMainLogger } from './utils/logger';

// (c) - Harvey Randall 2020-2022

// Big thanks to the https://github.com/jamiebuilds/the-super-tiny-compiler for insipration and help with the tokeniser and paser and other parts.

CreateMainLogger();

console.log(
    JSON.stringify(
        parser([
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sayHello' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'name', value: 'hello' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'TOKEN' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'TOKEN' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'Discord' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'iNeed' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'discord.js' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'client' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'new' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'Discord.Client' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'client.on' },
            { type: 'string', value: 'ready' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'function' },
            { type: 'name', value: 'data' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'add' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'name', value: 'Current' },
            { type: 'name', value: 'Logged' },
            { type: 'name', value: 'in' },
            { type: 'name', value: 'as' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'client.user.username' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: '#' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'client.user.discriminator' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'add' },
            { type: 'string', value: 'Current in ' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'client.guilds.cache.size' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sring' },
            { type: 'name', value: 'servers' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'client.on' },
            { type: 'string', value: 'message' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'async' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'message' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'if' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'and' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'equal' },
            { type: 'name', value: 'message.content' },
            { type: 'string', value: 'hello' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'equal' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'ToNumber' },
            { type: 'name', value: 'message.author.bot' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'false' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'message.reply' },
            { type: 'string', value: 'hello' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'functionIWant' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'name', value: 'secondInput' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'secondInput' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'AsyncFunction' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'async' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'functionIWant' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'hello' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'Second Input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'AsyncFunction' },
            { type: 'string', value: 'async' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'after' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'string', value: 'done' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'error' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'add' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'There was a error ' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'Newer' },
            { type: 'string', value: 'hello' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'function' },
            { type: 'name', value: 'hello' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'reply' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'PromiseMaker' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'promise' },
            { type: 'name', value: 'resolve' },
            { type: 'name', value: 'reject' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'if' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'equal' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'string', value: "'hello'" },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'reject' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'Not going to lie there is a errror' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'if' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'notequal' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'string', value: "'hello'" },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'resolve' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'letsmake' },
            { type: 'name', value: 'reponse' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'PromiseMaker' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'hello' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'error' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'add' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'There was a error ' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'PromiseMaker' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'anything else' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'error' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'add' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'There was a error ' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'after' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'Promises successful' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'PromiseMaker' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'hello' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'after' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'Promises successful' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'error' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'Arrowfunc' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'body' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'sendOut' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'add' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'string' },
            { type: 'string', value: 'There was a error ' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'input' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'call' },
            { type: 'name', value: 'client.login' },
            { type: 'paren', value: '<' },
            { type: 'name', value: 'var' },
            { type: 'name', value: 'TOKEN' },
            { type: 'paren', value: '>' },
            { type: 'paren', value: '>' },
        ]),
    ),
);
