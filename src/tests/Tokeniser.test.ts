import { tokenizer } from '../compiler/Tokeniser';

test('Tozeniser, Standard Harvscript', () => {
    expect(
        tokenizer(`<sayHello <string hello>>


        <letsmake TOKEN <string "TOKEN" >>
        <letsmake Discord <iNeed <string "discord.js">>>
        <letsmake client <new <call Discord.Client>>>

        <call client.on "ready" <function data <body 
            <sendOut <add <string Current Logged in as > <var client.user.username> <string "#"> <var client.user.discriminator>>>
            <sendOut <add "Current in " <var client.guilds.cache.size <sring servers> >>>
        >>>

        <call client.on "message" <async <Arrowfunc message 
            <body 
                <if <and <equal message.content "hello"> <equal <ToNumber message.author.bot> <false>>>
                    <body 
                        <call message.reply "hello">
                    >
                >
            >
        >>>

        <letsmake functionIWant <Arrowfunc input secondInput <body 
            <sendOut <var input>>
            <sendOut <var secondInput>>
        >>>

        <letsmake AsyncFunction <async <Arrowfunc input <body
            <sendOut <var input>>
        >>>>

        <call functionIWant <string "hello"> <string "Second Input"> >
        <call AsyncFunction "async" >
        <after <Arrowfunc input <body <sendOut  "done">>>>
        <error <Arrowfunc input <body <sendOut <add <string "There was a error "> <var input>>>>>>

        <letsmake Newer "hello">

        <function hello input <body <reply <var input>>>>

        <letsmake PromiseMaker <Arrowfunc input <body
            <promise resolve reject <body
            <sendOut <var input>>
            <if <equal <var input> "'hello'"> <body
                <call reject <string "Not going to lie there is a errror">>
            >>
            <if <notequal <var input> "'hello'"> <body
                <call resolve>
            >>
            >>
        >>>
        <letsmake reponse <call PromiseMaker <string "hello">>>
        <error <Arrowfunc input <body <sendOut <add <string"There was a error "> <var input>>>>>>
        <call PromiseMaker <string "anything else">>
        <error <Arrowfunc input <body <sendOut <add <string "There was a error "> <var input>>>>>>
        <after <Arrowfunc input <body <sendOut <string "Promises successful">>>>>

        <call PromiseMaker <string "hello">>
        <after <Arrowfunc input <body <sendOut  <string "Promises successful">>>>>
        <error <Arrowfunc input <body <sendOut <add <string"There was a error "> <var input>>>>>>
        <call client.login <var TOKEN>>`),
    ).toStrictEqual([
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sayHello' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'name', value: 'hello' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'TOKEN' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'TOKEN' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'Discord' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'iNeed' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'discord.js' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'client' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'new' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'Discord.Client' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'client.on' },
        { type: 'string', value: 'ready' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'function' },
        { type: 'name', value: 'data' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'add' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'name', value: 'Current' },
        { type: 'name', value: 'Logged' },
        { type: 'name', value: 'in' },
        { type: 'name', value: 'as' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'client.user.username' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: '#' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'client.user.discriminator' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'add' },
        { type: 'string', value: 'Current in ' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'client.guilds.cache.size' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sring' },
        { type: 'name', value: 'servers' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'client.on' },
        { type: 'string', value: 'message' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'async' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'message' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'if' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'and' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'equal' },
        { type: 'name', value: 'message.content' },
        { type: 'string', value: 'hello' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'equal' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'ToNumber' },
        { type: 'name', value: 'message.author.bot' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'false' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'message.reply' },
        { type: 'string', value: 'hello' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'functionIWant' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'name', value: 'secondInput' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'secondInput' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'AsyncFunction' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'async' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'functionIWant' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'hello' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'Second Input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'AsyncFunction' },
        { type: 'string', value: 'async' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'after' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'string', value: 'done' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'error' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'add' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'There was a error ' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'Newer' },
        { type: 'string', value: 'hello' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'function' },
        { type: 'name', value: 'hello' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'reply' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'PromiseMaker' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'promise' },
        { type: 'name', value: 'resolve' },
        { type: 'name', value: 'reject' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'if' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'equal' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'string', value: "'hello'" },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'reject' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'Not going to lie there is a errror' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'if' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'notequal' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'string', value: "'hello'" },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'resolve' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'letsmake' },
        { type: 'name', value: 'reponse' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'PromiseMaker' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'hello' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'error' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'add' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'There was a error ' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'PromiseMaker' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'anything else' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'error' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'add' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'There was a error ' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'after' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'Promises successful' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'PromiseMaker' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'hello' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'after' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'Promises successful' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'error' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'Arrowfunc' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'sendOut' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'add' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        { type: 'string', value: 'There was a error ' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'input' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'call' },
        { type: 'name', value: 'client.login' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'var' },
        { type: 'name', value: 'TOKEN' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
    ]);
});

test('Tozeniser, Web Harvscript', () => {
    expect(
        tokenizer(
            `<function GlobalCSS Mainparent <body
        <render <var Mainparent>
            <style <string "
                .nav-button{
                    background-color: #4CAF50; /* Green */
                    border: none;
                    color:white;
                    padding: 15px 32px;
                    text-align: center;
                    text-decoration: none;
                    font-size: 16px;
                    cursor: pointer;
                    outline: none;
                }
                .nav-button:hover {
                    background-color: #3e8e41;
                    }
                body{
                    border:0;
                }
                .hidden_tag{
                    display: none;
                }
                /* Yikes this handles the small text */
                .downabit{
                    transform: translate(0,100%);
                }
            "> <empty>>
        >
    >>`.replace(/ /g, ''),
        ),
    ).toStrictEqual([
        { type: 'paren', value: '<' },
        { type: 'name', value: 'functionGlobalCSSMainparent' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'body' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'render' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'varMainparent' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'style' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'string' },
        {
            type: 'string',
            value: '\n.nav-button{\nbackground-color:#4CAF50;/*Green*/\nborder:none;\ncolor:white;\npadding:15px32px;\ntext-align:center;\ntext-decoration:none;\nfont-size:16px;\ncursor:pointer;\noutline:none;\n}\n.nav-button:hover{\nbackground-color:#3e8e41;\n}\nbody{\nborder:0;\n}\n.hidden_tag{\ndisplay:none;\n}\n/*Yikesthishandlesthesmalltext*/\n.downabit{\ntransform:translate(0,100%);\n}\n',
        },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '<' },
        { type: 'name', value: 'empty' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
        { type: 'paren', value: '>' },
    ]);
});
